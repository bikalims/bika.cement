{"version":3,"file":"timeseries.js","mappings":"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","sources":["webpack://bika.cement/./app/TimeSeries.coffee"],"sourcesContent":["window.d3 = d3\n\nclass TimeSeries \n\n  ###*\n   * TimeSeries Field for the Listing Table\n   *\n   * A multi value field is identified by the column type \"timeseries\" in the\n   * listing view, e.g.  `self.columns = {\"Result\": {\"type\": \"timeseries\"}, ... }`\n   *\n  ###\n  constructor: (config) ->\n    @container = config.container  # DOM element\n    @state = config.state\n    @props = config.props\n    # console.log('constructor complete')\n\n  ###\n   * Calculate Y range\n  ###\n  get_Y_range: (minY, maxY) ->\n    diffY = maxY - minY\n    interval = 0\n    if diffY > 70\n      interval = 10\n    else if diffY > 50\n      interval = 5\n    else if diffY > 20\n      interval = 2\n    else if diffY > 10\n      interval = 1\n\n    if interval > 0\n      minTicks = minY - (minY % interval) + interval\n      maxTicks = maxY + (maxY % interval) + interval\n      y_range = d3.range(minTicks, maxTicks, interval)\n    else\n      y_range = d3.range(minY, maxY)\n\n    # console.log \"Y Axis: min: \", minY, \" max: \", maxY, \" diffY: \", diffY, \" interval: \", interval\n    y_range\n\n  ###\n   * Converts the string value to an array\n  ###\n  to_matrix: (listString, headers) ->\n    # No values yet\n    return [] if !listString || listString.length == 0\n\n    # Parse the string version of the list of lists into an array\n    # list = JSON.parse(listString)\n    list = listString\n\n    # Map each inner list to an object using the headers\n    matrix = list.map (innerList) ->\n        obj = {}\n        headers.forEach (header, index) ->\n            obj[header] = innerList[index]\n        obj\n\n    matrix.map (row) ->\n        headers.forEach (header, index) ->\n            if index = 0\n              row[header] = row[header]\n            else\n              row[header] = parseFloat(row[header])\n    matrix\n\n\n  getLineConfigs = (count) ->\n    configs = [\n      {symbol: d3.symbolStar, dash: \"\"}\n      {symbol: d3.symbolSquare, dash: \"\"}\n      {symbol: d3.symbolTriangle, dash: \"\"}\n      {symbol: d3.symbolDiamond, dash: \"\"}\n      {symbol: d3.symbolCross, dash: \"\"}\n    ]\n    configs.slice(0, count)\n\n  # Create symbol generator\n  symbolGenerator = d3.symbol().size(48)  # Adjust size as needed\n\n  ###\n   * Inputs table builder. Generates a table of  inputs as matrix\n  ###\n  build_graph: ->\n    # console.log \"TimeSeries::build_graph: entered\"\n    try\n      # console.log(\"Data being used for rendering:\", this.state.value)  # Log the data\n      values = this.state.value\n\n      if values == \"\"\n        console.log \"TimeSeries::build_graph: exit because no data\"\n        @container.current.appendChild([])\n        return\n\n      # Get datasets\n      columns = this.props.item.time_series_columns\n      col_types = columns.map (i) -> i.ColumnType\n      col_colors = columns.map (i) -> i.ColumnColor\n      headers = columns.map (i) -> i.ColumnTitle\n      index = headers[0]\n      data = @to_matrix(values, headers)\n\n      # Generate the line colors (exclude index)\n      line_configs = getLineConfigs(headers.length - 1)\n\n      # Set up dimensions\n      margin = {top: 40, right: 80, bottom: 50, left: 60}\n      width = 700 - margin.left - margin.right\n      height = 400 - margin.top - margin.bottom + 50\n\n      # Set up scales\n      x = d3.scaleLinear()\n        .domain(d3.extent(data, (d) -> parseFloat(d[index])))\n        .range([0, width])\n\n      # Set up Y scale with trimmed domain\n      absoluteMinY = d3.min(data.flatMap((row) -> headers.slice(1).map((header) -> parseFloat(row[header]))))\n      minY_factor = 0.05; # 20%\n      minY = absoluteMinY - absoluteMinY * minY_factor;\n\n      maxY = d3.max(data.flatMap((row) -> headers.slice(1).map((header) -> parseFloat(row[header]))))\n\n      y = d3.scaleLinear()\n        .domain([Math.floor(minY), Math.ceil(maxY)])  # Trim domain to just cover data range\n        .range([height, 0])\n\n      # Create SVG container\n      svg = d3.select(@container)\n        .append('svg')\n        .attr(\"id\", \"timeseries-svg\")  # Add unique ID\n        .style(\"height\", \"#{height+140}px\")\n\n      # Remove any previous SVG content\n      svg.selectAll('*').remove()\n\n      svg = svg\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .attr('xmlns', 'http://www.w3.org/2000/svg')\n        .append(\"g\")\n        .attr(\"transform\", \"translate(#{margin.left},#{margin.top})\")\n\n      # Graph title\n      svg.append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", -margin.top / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .style(\"font-size\", \"16px\")\n        .style(\"font-weight\", \"bold\")\n        .text(this.props.item.time_series_graph_title)\n\n      # X-axis\n      svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,#{height})\")\n        .call(d3.axisBottom(x))\n\n      # X-axis label\n      svg.append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height + margin.bottom - 10)\n        .attr(\"text-anchor\", \"middle\")\n        .style(\"font-size\", \"12px\")\n        .text(this.props.item.time_series_graph_xaxis)\n\n      # Y-axis\n      y_range = @get_Y_range(minY, maxY)\n      yAxis = d3.axisLeft(y)\n        .tickValues(y_range)\n        .tickSize(-width)  # Extend ticks across the chart width\n\n      # Y-axis label\n      svg.append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"x\", -height / 2)\n        .attr(\"y\", -margin.left + 15)\n        .attr(\"text-anchor\", \"middle\")\n        .style(\"font-size\", \"12px\")\n        .text(this.props.item.time_series_graph_yaxis)\n\n      # Add horizontal grid lines\n      svg.append(\"g\")\n          .attr(\"class\", \"grid horizontal\")\n          .attr(\"transform\", \"translate(0, 0)\")\n          .call(yAxis)\n          .selectAll(\"line\")\n          .style(\"stroke\", \"#999\")  # Lighter gray\n          .style(\"opacity\", 0.4)       # Adjust transparency\n\n      # Add vertical grid lines\n      svg.append(\"g\")\n        .attr(\"class\", \"grid vertical\")\n        .attr(\"transform\", \"translate(0, #{height})\")\n        .call(\n          d3.axisBottom(x)\n            .tickSize(-height)  # Extend ticks across the chart height\n            .tickFormat(\"\")     # Remove tick labels\n        )\n        .selectAll(\"line\")\n        .style(\"stroke\", \"#999\")  # Lighter gray\n        .style(\"stroke-dasharray\", \"2,2\")\n        .style(\"opacity\", 0.8)       # Adjust transparency\n\n      # Draw axes\n      svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,#{height})\")\n        .call(d3.axisBottom(x))\n\n      # Get interpolation\n      interp = this.props.item.time_series_graph_interpolation\n      # console.log(interp)\n      curve_val = d3[interp]\n\n      headers.slice(1).forEach((key, i) ->\n        # console.debug \"Main loop: \" + key + \"  \" + i\n\n        # Filter data to exclude rows with null, undefined, or non-numeric values for the current key\n        validData = data.filter((d) ->\n          d[key]? and not isNaN(d[key]) # Ensure value exists and is numeric\n        )\n\n        # Line generator\n        lineGen = d3.line()\n          .curve(curve_val)\n          .x((d) ->\n            x(d[index])\n          )\n          .y((d) ->\n            y(d[key])\n          )\n\n        svg.append(\"path\")\n          .datum(validData) # Use filtered data\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke-width\", 2)\n          .attr(\"stroke\", col_colors[i+1])\n          .attr(\"stroke-dasharray\", line_configs[i].dash)\n          .attr(\"d\", lineGen)\n\n        # Add data points with different symbols\n        svg.selectAll(\".symbol-#{i}\")\n          .data(validData) # Use filtered data\n          .enter().append(\"path\")\n          .attr(\"class\", \"symbol symbol-#{i}\")\n          .attr(\"d\", symbolGenerator.type(line_configs[i].symbol))\n          .attr(\"transform\", (d) ->\n            # Ensure valid x and y before applying transform\n            xVal = parseFloat(d[index])\n            yVal = parseFloat(d[key])\n            if not isNaN(xVal) and not isNaN(yVal)\n              \"translate(#{x(xVal)}, #{y(yVal)})\"\n            else\n              null # Skip invalid points\n          )\n          .style(\"fill\", col_colors[i+1])\n      )\n\n      # Add legend\n      legend = svg.append(\"g\")\n        .attr(\"class\", \"legend\")\n        .attr(\"transform\", \"translate(50, #{height + 50})\")  # Move legend below the graph\n\n      # Add legend items\n      legendItems = legend.selectAll(\"g\")\n        .data(headers.slice(1))\n        .enter().append(\"g\")\n        .attr(\"transform\", (d, i) ->\n          xOffset = parseFloat((i % Math.floor(width / 100)) * 100)  # Horizontal spacing\n          yOffset = parseFloat(Math.floor(i / Math.floor(width / 100)) * 20)  # Vertical spacing\n          \"translate(#{xOffset}, #{yOffset})\"\n        )\n\n      # Add legend color symbols\n      legendItems.append(\"path\")\n        .attr(\"d\", (d, i) ->\n          d3.symbol().type(line_configs[i].symbol).size(100)()\n        )\n        .attr(\"transform\", \"translate(9, 9)\")  # Center the symbol within the legend item\n        .style(\"fill\", (d, i) -> col_colors[i+1])\n\n      # Add legend text\n      legendItems.append(\"text\")\n        .attr(\"x\", 24)\n        .attr(\"y\", 9)\n        .attr(\"dy\", \"0.35em\")\n        .style(\"font-size\", \"12px\")\n        .text((d) -> d)\n\n      console.log \"TimeSeries::build_graph: ended\"\n\n    catch error\n      console.error(\"Error in build_graph:\", error)\n\nwindow.TimeSeries = TimeSeries\n"],"names":["TimeSeries","window","d3","config","_classCallCheck","container","state","props","get_Y_range","minY","maxY","diffY","interval","maxTicks","minTicks","y_range","range","to_matrix","listString","headers","list","matrix","length","map","innerList","obj","forEach","header","index","row","parseFloat","build_graph","absoluteMinY","col_colors","col_types","columns","curve_val","data","error","height","interp","legend","legendItems","line_configs","margin","minY_factor","svg","values","width","x","y","yAxis","value","console","log","current","appendChild","item","time_series_columns","i","ColumnType","ColumnColor","ColumnTitle","getLineConfigs","top","right","bottom","left","scaleLinear","domain","extent","d","min","flatMap","slice","max","Math","floor","ceil","select","append","attr","style","concat","selectAll","remove","text","time_series_graph_title","call","axisBottom","time_series_graph_xaxis","axisLeft","tickValues","tickSize","time_series_graph_yaxis","tickFormat","time_series_graph_interpolation","key","lineGen","validData","filter","isNaN","line","curve","datum","dash","enter","symbolGenerator","type","symbol","xVal","yVal","xOffset","yOffset","size","error1","count","configs","symbolStar","symbolSquare","symbolTriangle","symbolDiamond","symbolCross"],"sourceRoot":""}